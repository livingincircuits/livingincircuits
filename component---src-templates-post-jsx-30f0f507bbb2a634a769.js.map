{"version":3,"sources":["webpack:///./src/components/Suggestions.jsx","webpack:///./src/templates/post.jsx"],"names":["Suggestions","left","right","className","to","fields","slug","frontmatter","title","Post","pageContext","postNode","data","markdownRemark","post","id","postPath","postSEO","date","timeToRead","kebabCase","category","type","input","html","secondary","pageQuery"],"mappings":"4FAAA,qCA4CeA,IAxCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OAElB,yBAAKC,UAAU,+BAEZF,GACC,kBAAC,IAAD,CAAME,UAAU,mBAAmBC,GAAIH,EAAKI,OAAOC,MAEjD,6BAASH,UAAU,wBAEjB,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,qBACXF,EAAKM,YAAYC,UAS3BN,GACC,kBAAC,IAAD,CAAMC,UAAU,mBAAmBC,GAAIF,EAAMG,OAAOC,MAElD,6BAASH,UAAU,wBAEjB,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,qBACXD,EAAMK,YAAYC,a,oCC/BjC,+IAuDeC,UA/CF,SAAC,GAAgF,IAAD,IAA7EC,YAAeJ,EAA8D,EAA9DA,KAAML,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,MAAiCS,EAAiB,EAAzCC,KAAQC,eACpDC,EAAOH,EAASJ,YAKtB,OAJKO,EAAKC,KACRD,EAAKC,GAAKT,GAKV,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAKU,SAAUV,EAAMK,SAAUA,EAAUM,SAAO,IAEhD,kBAAC,IAAD,CAAQT,MAAOM,EAAKN,OACjBM,EAAKN,OAGR,yBAAKL,UAAU,cAEb,6BAASA,UAAU,kBACf,uBAAGA,UAAU,gCACVW,EAAKI,KADR,oBACsCP,EAASQ,WAD/C,OAEE,2CACY,kBAAC,IAAD,CAAMf,GAAE,eAAiBgB,IAAUN,EAAKO,WAAcP,EAAKO,aAK7E,yBAAKlB,UAAU,aACb,6BAASA,UAAU,uBAAuBmB,KAAK,WAC7C,kBAAC,IAAD,CAASC,MAAOZ,EAASa,SAI7B,iCACE,wBAAIrB,UAAU,yBAAd,cAGA,kBAAC,IAAD,CAAaF,KAAMA,EAAMC,MAAOA,EAAOuB,WAAS,QAqBnD,IAAMC,EAAS","file":"component---src-templates-post-jsx-30f0f507bbb2a634a769.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst Suggestions = ({ left, right }) => (\n\n  <div className=\"post-block post-block--half\">\n\n    {left && (\n      <Link className=\"post-block__item\" to={left.fields.slug}>\n\n        <article className=\"post-block__bordered\">\n\n          <div className=\"post-block__content\">\n            <h2 className=\"post-block__title\">\n              {left.frontmatter.title}\n            </h2>\n          </div>\n\n        </article>\n\n      </Link>\n    )}\n\n    {right && (\n      <Link className=\"post-block__item\" to={right.fields.slug}>\n\n        <article className=\"post-block__bordered\">\n\n          <div className=\"post-block__content\">\n            <h2 className=\"post-block__title\">\n              {right.frontmatter.title}\n            </h2>\n          </div>\n\n        </article>\n\n      </Link>\n    )}\n\n  </div>\n\n);\n\nexport default Suggestions;\n\nSuggestions.propTypes = {\n  left: PropTypes.any.isRequired,\n  right: PropTypes.any.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\nimport { Content, SEO, Layout } from 'elements';\nimport Header from '../components/Header';\nimport Suggestions from '../components/Suggestions';\n\nconst Post = ({ pageContext: { slug, left, right }, data: { markdownRemark: postNode } }) => {\n  const post = postNode.frontmatter;\n  if (!post.id) {\n    post.id = slug;\n  }\n\n  return (\n\n    <Layout>\n\n      <SEO postPath={slug} postNode={postNode} postSEO />\n\n      <Header title={post.title}>\n        {post.title}\n      </Header>\n\n      <div className=\"page-inner\">\n\n        <section className=\"article-header\">\n            <p className=\"article-header__text content\">\n              {post.date} &middot; Time to Read: {postNode.timeToRead} Min\n              <span>\n                Category: <Link to={`/categories/${kebabCase(post.category)}`}>{post.category}</Link>\n              </span>\n            </p>\n        </section>\n\n        <div className=\"page-text\">\n          <article className=\"content page-content\" type=\"article\">\n            <Content input={postNode.html} />\n          </article>\n        </div>\n\n        <section>\n          <h3 className=\"heading align-central\">\n            More Posts\n          </h3>\n          <Suggestions left={left} right={right} secondary />\n        </section>\n\n      </div>\n\n    </Layout>\n\n  );\n};\n\nexport default Post;\n\nPost.propTypes = {\n  pageContext: PropTypes.shape({\n    slug: PropTypes.string.isRequired,\n  }).isRequired,\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        date(formatString: \"DD. MMMM YYYY\", locale: \"en\")\n        category\n      }\n      fields {\n        slug\n        sourceInstanceName\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}